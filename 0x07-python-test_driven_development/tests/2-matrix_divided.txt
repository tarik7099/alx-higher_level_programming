imopt moudel:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided



test normal:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


test with 0:


    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero


no the same size:


    >>> matrix_divided([[1, 2, 3], [4, 5,9 ,3]], 3)
    Traceback (most recent call last):
    ... 
    TypeError: Each row of the matrix must have the same size


0 pass matrix:

    >>> matrix_divided(0, 4)
    Traceback (most recent call last):
    ...
    TypeError: object of type 'int' has no len()

0 pass matrix:

    >>> matrix_divided(0, 4)
    Traceback (most recent call last):
    ...
    TypeError: object of type 'int' has no len()

1 pass matrix:

    >>> matrix_divided([[3]], 3)
    [[1.0], []]



str with matrix:


    >>> matrix_divided([[3, 9], [15, 3]],"3")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

str in list:
    >>> matrix_divided([[3, "9"], [15, 3]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats



big :
    >>> matrix_divided([[4, 6, 7, 8],[5, 8, 12, 9]], 34774474)
    [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
    >>> matrix_divided([[4, 6, 7, 8],[5, 8, 12, 9]], 3.3e+99)
    [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]


float:
    >>> matrix_divided([[2, 4, 5.45454]], 2.343)
    [[0.85, 1.71, 2.33], []]